"""`BiLayer1D`:
    L1, L2 : lattice constants for two layers, respectively
    X1, X2 : atomic positions for two layers (in the unit cell), respectively
    z : the distance between two layers in d+1 direction,
        if z=0, then it is a d(=1)-dimensional system
    v : potential generated by each atom
"""
struct BiLayer1D
    L1::Float64
    L2::Float64
    X1::Array{Float64, 1}
    X2::Array{Float64, 1}
    z::Float64
    v1::Function
    v2::Function
end
BiLayer1D(; L1, L2, X1, X2, z, v1, v2) = BiLayer1D(L1, L2, X1, X2, z, v1, v2)



"""`pwIncommensurate1D`: plane wave method for 1d bilayer incommensurate systems
    Ecut: energy cutoff
    kpts: k-points in BZ
    n_fftw: number of grid points for FFT
    n_eigs: number of eigenpairs to calculate
    γ:  e^{-γ|G_1m|^2} are the coefficients of basic function = e^{i(G_1m)x} for different potentials
"""


struct pwIncommensurate1D
    Ecut::Float64
    kpts::Array{Float64,1}
    n_fftw::Int
    n_eigs::Int
    γ::Float64
end
pwIncommensurate1D(; Ecut, kpts, n_fftw, n_eigs, γ) =
            pwIncommensurate1D(Ecut, kpts, n_fftw, n_eigs, γ)


"""`pwIncommensurate1D_LW`:
    The cutoff domain is D_LW
"""

struct pwIncommensurate1D_LW
    EcL::Float64
    EcW::Float64
    kpts::Array{Float64,1}    # K points 
    n_fftw::Int
    n_eigs::Int
    γ::Float64
end
pwIncommensurate1D_LW(; EcL, EcW, kpts, n_fftw, n_eigs, γ) =
            pwIncommensurate1D_LW(EcL, EcW, kpts, n_fftw, n_eigs, γ)


"""`TwoLayerIn2D`: structure and specie of two incommensurate layers.
    R1, R2: primative lattice vectors (column vectors)
    B1, B2: reciprocal lattice vectors (column vectors)
    Z1, Z2: nuclear charges
    neigs: number of states under consideration
"""

struct TwoLayerIn2D
    R1::Array{Float64,2}    # periodicity of sheet1
    R2::Array{Float64,2}    # periodicity of sheet2
    B1::Array{Float64,2}
    B2::Array{Float64,2}
    v1::Function
    v2::Function
    θ::Float64
    X1::Array{Float64, 1}
    X2::Array{Float64, 1}
end
TwoLayerIn2D(; R1, R2, B1, B2, v1, v2,θ, X1, X2) = TwoLayerIn2D(R1, R2, B1, B2, v1, v2,θ, X1, X2)


function reciprocal(R1,R2)
    # first compute the reciprocal vectors B1 and B2
    C1 = 2 * π / ( R1[1,1]*R1[2,2] - R1[1,2]*R1[2,1] )
    B1 = C1 * [ R1[2,2]  -R1[2,1]; -R1[1,2]  R1[1,1] ]
    C2 = 2 * π / ( R2[1,1]*R2[2,2] - R2[1,2]*R2[2,1] )
    B2 = C2 * [ R2[2,2]  -R2[2,1] ; -R2[1,2]  R2[1,1] ]
    return B1,B2
end


struct pwIncommensurate2D
    EcL::Float64
    EcW::Float64
    kpts::Array{Float64,2}
    n_fftwx::Int
    n_fftwy::Int
    n_eigs::Int
    γ::Float64
end
pwIncommensurate2D(; EcL, EcW, kpts, n_fftwx,n_fftwy , n_eigs, γ) =
            pwIncommensurate2D(EcL, EcW, kpts, n_fftwx,n_fftwy, n_eigs, γ)
